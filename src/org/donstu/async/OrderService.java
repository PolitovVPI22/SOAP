
package org.donstu.async;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OrderService", targetNamespace = "https://donstu.org/orders")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OrderService {


    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.donstu.async.GetAllProductsResponse>
     */
    @WebMethod(operationName = "getAllProducts")
    @RequestWrapper(localName = "getAllProducts", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllProducts")
    @ResponseWrapper(localName = "getAllProductsResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllProductsResponse")
    public Response<GetAllProductsResponse> getAllProductsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllProducts")
    @RequestWrapper(localName = "getAllProducts", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllProducts")
    @ResponseWrapper(localName = "getAllProductsResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllProductsResponse")
    public Future<?> getAllProductsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllProductsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<org.donstu.async.Product>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllProducts", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllProducts")
    @ResponseWrapper(localName = "getAllProductsResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllProductsResponse")
    @Action(input = "https://donstu.org/orders/OrderService/getAllProductsRequest", output = "https://donstu.org/orders/OrderService/getAllProductsResponse")
    public List<Product> getAllProducts();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.donstu.async.GetAllOrdersResponse>
     */
    @WebMethod(operationName = "getAllOrders")
    @RequestWrapper(localName = "getAllOrders", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllOrders")
    @ResponseWrapper(localName = "getAllOrdersResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllOrdersResponse")
    public Response<GetAllOrdersResponse> getAllOrdersAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllOrders")
    @RequestWrapper(localName = "getAllOrders", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllOrders")
    @ResponseWrapper(localName = "getAllOrdersResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllOrdersResponse")
    public Future<?> getAllOrdersAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllOrdersResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<org.donstu.async.Order>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllOrders", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllOrders")
    @ResponseWrapper(localName = "getAllOrdersResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.GetAllOrdersResponse")
    @Action(input = "https://donstu.org/orders/OrderService/getAllOrdersRequest", output = "https://donstu.org/orders/OrderService/getAllOrdersResponse")
    public List<Order> getAllOrders();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns org.donstu.async.Order
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "placeOrder", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.PlaceOrder")
    @ResponseWrapper(localName = "placeOrderResponse", targetNamespace = "https://donstu.org/orders", className = "org.donstu.async.PlaceOrderResponse")
    @Action(input = "https://donstu.org/orders/OrderService/placeOrderRequest", output = "https://donstu.org/orders/OrderService/placeOrderResponse")
    public Order placeOrder(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<Product> arg1);

}
